package dev.lukasnehrke.vulnaware.vulnerability.repository;

import dev.lukasnehrke.vulnaware.bom.model.Bom;
import dev.lukasnehrke.vulnaware.project.model.Project;
import dev.lukasnehrke.vulnaware.vulnerability.model.Vulnerability;
import dev.lukasnehrke.vulnaware.vulnerability.model.VulnerabilityStatus;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import java.util.List;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.lang.Nullable;

public final class VulnerabilitySpecs {

    private VulnerabilitySpecs() {}

    public static Specification<Vulnerability> filterByBom(final Bom bom) {
        return new Specification<>() {
            @Nullable
            @Override
            public Predicate toPredicate(final Root<Vulnerability> root, final CriteriaQuery<?> query, final CriteriaBuilder builder) {
                return builder.equal(root.get("bom"), bom);
            }
        };
    }

    public static Specification<Vulnerability> filterByProject(final Project project) {
        return (root, query, builder) -> {
            query.distinct(true);
            return builder.equal(root.get("bom").get("project"), project);
        };
    }

    public static Specification<Vulnerability> filterByKeyword(final String keyword) {
        return new Specification<>() {
            @Nullable
            @Override
            public Predicate toPredicate(final Root<Vulnerability> root, final CriteriaQuery<?> query, final CriteriaBuilder builder) {
                return builder.like(builder.lower(root.get("advisory").get("summary")), "%" + keyword.toLowerCase() + "%");
            }
        };
    }

    public static Specification<Vulnerability> filterByStatus(final List<VulnerabilityStatus> status) {
        return new Specification<>() {
            @Nullable
            @Override
            public Predicate toPredicate(final Root<Vulnerability> root, final CriteriaQuery<?> query, final CriteriaBuilder builder) {
                return builder.in(root.get("status")).value(status);
            }
        };
    }

    public static Specification<Vulnerability> filterByRisk(final double severityLower, final double severityUpper) {
        return new Specification<>() {
            @Nullable
            @Override
            public Predicate toPredicate(final Root<Vulnerability> root, final CriteriaQuery<?> query, final CriteriaBuilder builder) {
                return builder.between(root.get("advisory").get("risk"), severityLower, severityUpper);
            }
        };
    }
}
