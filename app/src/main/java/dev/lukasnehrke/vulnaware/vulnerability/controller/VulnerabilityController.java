package dev.lukasnehrke.vulnaware.vulnerability.controller;

import com.fasterxml.jackson.annotation.JsonView;
import dev.lukasnehrke.vulnaware.bom.model.Bom;
import dev.lukasnehrke.vulnaware.bom.model.Component;
import dev.lukasnehrke.vulnaware.bom.service.BomService;
import dev.lukasnehrke.vulnaware.project.model.Project;
import dev.lukasnehrke.vulnaware.project.service.ProjectService;
import dev.lukasnehrke.vulnaware.vulnerability.dto.VulnUpdateRequest;
import dev.lukasnehrke.vulnaware.vulnerability.model.VulnerabilityStatus;
import dev.lukasnehrke.vulnaware.vulnerability.repository.VulnerabilityRepository;
import dev.lukasnehrke.vulnaware.vulnerability.repository.VulnerabilitySpecs;
import dev.lukasnehrke.vulnaware.vulnerability.service.VulnerabilityService;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.lang.Nullable;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/projects/{projectSlug}")
@RequiredArgsConstructor
class VulnerabilityController {

    private final VulnerabilityRepository repository;
    private final ProjectService projectService;
    private final BomService bomsService;
    private final VulnerabilityService vulnService;

    @GetMapping("/vulnerabilities")
    @JsonView(Component.PublicView.class)
    ResponseEntity<?> findVulnerabilities(
        @PathVariable final String projectSlug,
        @RequestParam final String tag,
        @Nullable @RequestParam(required = false) final List<VulnerabilityStatus> status,
        @Nullable @RequestParam(required = false) final String keyword,
        @Nullable @RequestParam(required = false) final Double riskLower,
        @Nullable @RequestParam(required = false) final Double riskUpper,
        @RequestParam(defaultValue = "0") final int page,
        @RequestParam(defaultValue = "10") final int size
    ) {
        final var project = projectService.findBySlug(projectSlug);
        final Bom bom = bomsService.findBomOrThrow(project, tag);

        /* build search predicate */
        var spec = VulnerabilitySpecs.filterByBom(bom);
        if (keyword != null) {
            spec = spec.and(VulnerabilitySpecs.filterByKeyword(keyword));
        }
        if (status != null && !status.isEmpty()) {
            spec = spec.and(VulnerabilitySpecs.filterByStatus(status));
        }
        if (riskLower != null || riskUpper != null) {
            spec = spec.and(VulnerabilitySpecs.filterByRisk(riskLower == null ? 0 : riskLower, riskUpper == null ? 10 : riskUpper));
        }

        /* retrieve page data respecting query params */
        final var sort = Sort.by("advisory.id").descending();
        final var paging = PageRequest.of(page, size, sort);
        final var result = repository.findAll(spec, paging);

        /* create response */
        final Map<String, Object> response = new HashMap<>();
        response.put("totalItems", result.getTotalElements());
        response.put("totalPages", result.getTotalPages());
        response.put("page", result.getNumber());
        response.put("vulnerabilities", result.getContent());

        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    @GetMapping("/vulnerabilities/{id}")
    @JsonView(Component.PublicView.class)
    ResponseEntity<?> get(final Project project, @PathVariable final Long id) {
        final var vuln = vulnService.get(id);
        return new ResponseEntity<>(vuln, HttpStatus.OK);
    }

    @PostMapping("/vulnerabilities/{id}")
    @JsonView(Component.PublicView.class)
    ResponseEntity<?> update(final Project project, @PathVariable final Long id, @RequestBody VulnUpdateRequest req) {
        var vuln = vulnService.get(id);
        vuln.setStatus(VulnerabilityStatus.valueOf(req.status()));
        vuln.setComment(req.comment());
        vuln = repository.save(vuln);
        return new ResponseEntity<>(vuln, HttpStatus.OK);
    }
}
