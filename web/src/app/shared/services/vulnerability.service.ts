import { HttpClient, HttpParams } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Vulnerability, VulnerabilityPage } from "../models/vulnerability.model";
import { environment } from "../../../environments/environment";

const bounds = {
    critical: { lower: 9.0, upper: 10.0 },
    high: { lower: 7.0, upper: 8.9 },
    medium: { lower: 4.0, upper: 6.9 },
    low: { lower: 0.1, upper: 3.9 },
    none: { lower: 0.0, upper: 0.0 },
};

@Injectable({
    providedIn: "root",
})
export class VulnerabilityService {
    constructor(private http: HttpClient) {}

    findAll({
        project,
        tag,
        page,
        pageSize,
        keyword,
        status,
        severity,
    }: {
        project: string;
        tag?: string;
        page: number;
        pageSize: number;
        keyword: string | null;
        status: string[];
        severity: string[];
    }) {
        let params = new HttpParams()
            .set("page", page)
            .set("size", pageSize)
            .set("status", status.map((s) => s.toUpperCase()).join(","));

        if (tag) {
            params = params.set("tag", tag);
        }

        if (keyword) {
            params = params.set("keyword", keyword);
        }

        const limits = this.toLimits(severity);
        if (limits) {
            params = params.set("riskLower", limits.lower).set("riskUpper", limits.upper);
        }

        return this.http.get<VulnerabilityPage>(`${environment.baseUrl}/projects/${project}/vulnerabilities`, { params });
    }

    find(project: string, id: string) {
        return this.http.get<Vulnerability>(`${environment.baseUrl}/projects/${project}/vulnerabilities/${id}`);
    }

    update(project: string, id: string, status: string, comment?: string) {
        return this.http.post<Vulnerability>(`${environment.baseUrl}/projects/${project}/vulnerabilities/${id}`, {
            status,
            comment,
        });
    }

    public getSeverity(risk?: number): string {
        if (!risk) return "unknown";
        if (risk > 9.0) return "critical";
        if (risk > 7.0) return "high";
        if (risk > 4.0) return "medium";
        if (risk > 0.0) return "low";
        return "none";
    }

    private toLimits(severity: string[]): any {
        if (severity.length === 0) return undefined;
        let lower,
            upper = 0;
        for (let status of severity) {
            if (lower === undefined || (bounds as any)[status].lower < lower) {
                lower = (bounds as any)[status].lower;
            }
            if (upper === undefined || (bounds as any)[status].upper > upper) {
                upper = (bounds as any)[status].upper;
            }
        }
        return { lower, upper };
    }
}
